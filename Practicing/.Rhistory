data(iris)
library(class)
data(iris)
library("class")
data(iris)
set.seed(12L)
tr <- sample (150,50)
nw <- sample (150,50)
?set.seed
set.seed(12L)
library("class")
# Drawing 50 random iris observations to train the knn ML model
set.seed(12L)
tr <- sample (150,50)
nw <- sample (150,50)
knnres <- knn()
?set.seed
?sample
?knnres
?head
library("class") # Package containing knn function to develop k Nearest Neighbor machine learning model
# Drawing 50 random iris observations to train the knn ML model
set.seed(12L) # Specifies a seed
tr <- sample (150,50) # Creates training set of 50 points of data
nw <- sample (150,50) # Creates new set of data to determine accuracy of ML model
knnResult <- knn(iris[tr, -5], iris[nw,-5], iris$Species[tr]) # Runs the ML model
head(knnResult) # See the first and last parts of the df for the knn
?knn
# Compare observed knn product to the observed outcome
table(knnResults, iris$Species[nw])
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw])
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw])
acc <- mean(knnResult == iris$Species[nw])
acc
?table
gc()
library("class") # Package containing knn function to develop k Nearest Neighbor machine learning model
# Drawing 50 random iris observations to train the knn ML model
tr <- sample (150,50) # Creates training set of 50 points of data
nw <- sample (150,50) # Creates new set of data to determine accuracy of ML model
# Drawing 50 random iris observations to train the knn ML model
tr <- sample (150,50) # Creates training set of 50 points of data
nw <- sample (150,50) # Creates new set of data to determine accuracy of ML model
knnResult <- knn(iris[tr, -5], # Assigns training data
iris[nw,-5],  # Assigns testing data
iris$Species[tr] # Assigns response variables
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
acc <- mean(knnResult == iris$Species[nw])
acc
?knn
# Drawing 50 random iris observations to train the knn ML model
set.seed(12L) # Specifies a seed
tr <- sample (150,50) # Creates training set of 50 points of data
nw <- sample (150,50) # Creates new set of data to determine accuracy of ML model
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=2               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
acc <- mean(knnResult == iris$Species[nw])
acc
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=1               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
acc <- mean(knnResult == iris$Species[nw])
acc
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=1               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK1 <- mean(knnResult == iris$Species[nw])
accK1
# Drawing 50 random iris observations to train the knn ML model
set.seed(12L) # Specifies a seed
tr <- sample (150,50) # Creates training set of 50 points of data
nw <- sample (150,50) # Creates new set of data to determine accuracy of ML model
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=1               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK1 <- mean(knnResult == iris$Species[nw])
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=2               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK1 <- mean(knnResult == iris$Species[nw])
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=1               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK1 <- mean(knnResult == iris$Species[nw])
accK1
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=2               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK2 <- mean(knnResult == iris$Species[nw])
accK1
accK2
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=3               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK3 <- mean(knnResult == iris$Species[nw]) # Modified to check different values of k
accK1 # accuracy when k = 1
accK2 # accuracy when k = 2
acck3 # accuracy when k = 3
acck3 # accuracy when k = 3
accK3 <- mean(knnResult == iris$Species[nw]) # Modified to check different values of k
accK1 # accuracy when k = 1
accK2 # accuracy when k = 2
acck3 # accuracy when k = 3
accK3 # accuracy when k = 3
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=4               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK4 <- mean(knnResult == iris$Species[nw]) # Modified to check different values of k
accK1 # accuracy when k = 1
accK2 # accuracy when k = 2
accK3 # accuracy when k = 3
accK4 # accuracy when k = 4
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=5               # Assigns number of neighbors to check
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK5 <- mean(knnResult == iris$Species[nw]) # Modified to check different values of k
accK1 # accuracy when k = 1; 0.96 for the above seed
accK2 # accuracy when k = 2; 0.94 for the above seed
accK3 # accuracy when k = 3; 0.94 for the above seed
accK4 # accuracy when k = 4; 0.96 for the above seed
accK5 # accuracy when k = 5;
knnResult <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=5,              # Assigns number of neighbors to check
prob = TRUE
) # Runs the ML model
head(knnResult) # See the first part of the factor after running the knn function
# Compare observed knn product to the observed outcome
table(knnResult, iris$Species[nw]) # Compares the Species printed by the knn function to the expected species
accK5 <- mean(knnResult == iris$Species[nw]) # Modified to check different values of k
accK1 # accuracy when k = 1; 0.96 for the above seed
accK2 # accuracy when k = 2; 0.94 for the above seed
accK3 # accuracy when k = 3; 0.94 for the above seed
accK4 # accuracy when k = 4; 0.96 for the above seed
accK5 # accuracy when k = 5; 0.94 for the above seed
knnResult5Prob <- knn(iris[tr, -5],     # Assigns training data
iris[nw,-5],      # Assigns testing data
iris$Species[tr], # Assigns response variables
k=5,              # Assigns number of neighbors to check
prob = TRUE
) # Runs the ML model
head(knnResult5Prob) # See the first part of the factor after running the knn function
# Checking what happens with 'prob = true'
table(attr(knnResult5Prob, "prob"))
?attr
